{
	"name": "Homegear::createGroup",
	"category": "Users and Groups",
	"shortDescription": "Creates a new group",
	"description": "This method creates a new group in Homegear. Each group as an Access Control List (ACL) assigned, which grants or denys a group permissions. The ACL is a <em>struct</em> with the following elements:<br/><br/><table class=\"table table-striped\"><thead><tr><th>Key</th><th>Description</th></tr></thead><tbody><tr><th><em>services</em></th><td>Grants or denies access to a service. Contains a <em>struct</em> with the service's name as key. Valid services are <em>ui</em>, <em>admin-ui</em> and <em>node-blue</em>. Allowed values are <em>true</em> to grant access and <em>false</em> to deny it. Wildcards: <ul><li>Service key <em>*</em>: All services.</li></ul></td></tr><tr><th><em>variablesRead</em></th><td>Grants or denies read access to peer variables, peer metadata and system variables. Contains a <em>struct</em> with devices (key: peer ID), which again contains a <em>struct</em> with channels (key: channel number), which contains a <em>struct</em> with variables (key: variable name). Each variable entry can be set to <em>true</em> to grant access or to <em>false</em> to deny access. Wildcards and special values: <ul><li>Device key <em>0</em>: All devices</li><li>Device key <em>0</em> and channel key <em>-1</em>: System variables</li><li>Channel key <em>-2</em>: Metadata</li><li>Channel key <em>-3</em>: All channels</li><li>Variable key <em>*</em>: All variables</li></ul></td></tr><tr><th><em>variablesWrite</em></th><td>Grants or denies write access to peer variables, peer metadata and system variables. The structure is the same as for <em>variablesRead</em>.</td></tr><tr><th><em>devicesRead</em></th><td>Grants or denies read access to a peer. Contains a <em>struct</em> with the peer ID as key. Allowed values are <em>true</em> to grant access and <em>false</em> to deny it. Wildcards: <ul><li>Device key <em>0</em>: All devices</li></ul></td></tr><tr><th><em>devicesWrite</em></th><td>Grants or denies write access to a peer. The structure is the same as for <em>devicesRead</em>.</td></tr><tr><th><em>roomsRead</em></th><td>Grants or denies read access to a room. Contains a <em>struct</em> with the room ID as key. Allowed values are <em>true</em> to grant access and <em>false</em> to deny it. Special values: <ul><li>Room key <em>0</em>: Elements with no room set.</li></ul></td></tr><tr><th><em>roomsWrite</em></th><td>Grants or denies write access to a room. The structure is the same as for <em>roomsRead</em>.</td></tr><tr><th><em>categoriesRead</em></th><td>Grants or denies read access to a category. Contains a <em>struct</em> with the category ID as key. Allowed values are <em>true</em> to grant access and <em>false</em> to deny it. Special values: <ul><li>Category key <em>0</em>: Elements with no category set.</li></ul></td></tr><tr><th><em>categoriesWrite</em></th><td>Grants or denies write access to a category. The structure is the same as for <em>categoriesRead</em>.</td></tr><tr><th><em>methods</em></th><td>Grants or denies access to a RPC method. Contains a <em>struct</em> with the method's name as key. Allowed values are <em>true</em> to grant access and <em>false</em> to deny it. Wildcards: <ul><li>Method key <em>*</em>: All RPC methods.</li></ul></td></tr><tr><th><em>eventServerMethods</em></th><td>Grants or denies access to RPC event server methods. The structure is the same as for <em>methods</em>.</td></tr></tbody></table><br/><em>methods</em> and <em>eventServerMethods</em> are always checked. For performance reasons all other ACL entries are only checked if defined. If undefined, access is granted. If access is specifically denied, the check returns immediately rejecting access even if access is granted somewhere else. If access is denied by a wildcard entry, a specific entry can still grant access (e. g. if access to all variables (<em>*</em>) is denied, access to <em>TEMPERATURE</em> still can be granted). If there are errors in the ACL structure, the method returns an error to avoid accidentally granting access due to a syntax error.",
	"signatures": [
		"int createGroup($translations, $acl)"
	],
	"parameters": [{
		"name": "translations",
		"type": "struct",
		"description": "The name of the group in different languages. The keys are the lower case ISO 639-1 language codes and the upper case ISO 3166-1 alpha-2 country codes seperated by a dash (e. g. en-US or fr-FR). The values are the group names in the different languages.",
		"exampleValue": "(Struct length=2)\n{\n  [en-US]\n  {\n    (String) Guests\n  }\n  [de-DE]\n  {\n    (String) GÃ¤ste\n  }\n}"
	}, {
		"name": "acl",
		"type": "struct",
		"description": "The Access Control List (ACL) to assign to the group.",
		"exampleValue": "(Struct length=2)\n{\n  [eventServerMethods]\n  {\n    (Struct length=1)\n    {\n      [*]\n      {\n        (Boolean) 1\n      }\n    }\n  }\n  [methods]\n  {\n    (Struct length=1)\n    {\n      [*]\n      {\n        (Boolean) 1\n      }\n    }\n  }\n}"
	}],
	"returnValue": "Returns the ID of the new group on success",
	"throws": [{
		"exception": "HomegearException",
		"description": "Returned if parameters are invalid"
	}],
	"example": "LyoqCiAqIEV4ZWN1dGUgdGhpcyBjb21tYW5kIGluIHlvdXIgdGVybWluYWwKICovCmhvbWVnZWFyIC1lIHJjICdwcmludF92KCRoZy0+Y3JlYXRlR3JvdXAoYXJyYXkoImVuLVVTIiA9PiAiR3Vlc3RzIiwgImRlLURFIiA9PiAiR8Okc3RlIiksIGFycmF5KCJ2YXJpYWJsZXNSZWFkIiA9PiBhcnJheSgzID0+IGFycmF5KDEgPT4gYXJyYXkoIlRFTVBFUkFUVVJFIiA9PiB0cnVlLCAiSFVNSURJVFkiID0+IHRydWUpKSwgNSA9PiBhcnJheSgxID0+IGFycmF5KCJURU1QRVJBVFVSRSIgPT4gdHJ1ZSkpKSwgInZhcmlhYmxlc1dyaXRlIiA9PiBhcnJheSgpLCAibWV0aG9kcyIgPT4gYXJyYXkoIioiID0+IHRydWUpLCAiZXZlbnRTZXJ2ZXJNZXRob2RzIiA9PiBhcnJheSgiKiIgPT4gdHJ1ZSkpKSk7Jw=="
}

