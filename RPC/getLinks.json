{
	"name": "getLinks",
	"category": "Devices",
	"shortDescription": "Returns direct links of all or a single peer",
	"description": "This method returns an array of type <a href=\"#linkDescription\">LinkDescription</a>. When a peer but no channel is specified, it returns <a href=\"#linkDescription\">LinkDescription</a> for all channels of the device. When no parameter is passed it returns <a href=\"#linkDescription\">LinkDescription</a> for all peers and channels.",
	"signatures": [
		"Array<LinkDescription> getLinks()",
		"Array<LinkDescription> getLinks(Integer peerId)",
		"Array<LinkDescription> getLinks(Integer peerId, Integer channel)",
		"Array<LinkDescription> getLinks(Integer peerId, Integer channel, Integer flags)"
	],
	"deprecatedSignatures": [
		"Array<LinkDescription> getLinks(String address)",
		"Array<LinkDescription> getLinks(String address, Integer flags)"
	],
	"parameters": [{
		"name": "peerId",
		"type": "Integer",
		"description": "The ID of the peer to get links for.",
		"exampleValue": "12"
	}, {
		"name": "channel",
		"type": "Integer",
		"description": "The channel to get the links for. If \"-1\" the links of all channels are returned.",
		"exampleValue": "1"
	}, {
		"name": "address",
		"type": "String",
		"description": "The serial number and channel of the peer to get the links for. When no channel is specified, the function returns <a href=\"#linkDescription\">LinkDescription</a> for all channels.",
		"exampleValue": "JEQ0578372:1"
	}, {
		"name": "flags",
		"type": "Integer",
		"description": "The following flags are available:<ul><li><b>1 (Group):</b> When the channel is part of a group, return <a href=\"#linkDescription\">LinkDescription</a> for the grouped channel, too.</li><li><b>2 (SenderParamset):</b> Append the <a href=\"#paramset\">link parameter set</a> of the sending channel.</li><li><b>4 (ReceiverParamset):</b> Append the <a href=\"#paramset\">link parameter set</a> of the receiving channel.</li><li><b>8 (SenderDescription):</b> Append the <a href=\"#deviceDescription\">device description</a> of the sending channel.</li><li><b>16 (ReceiverDescription):</b> Append the <a href=\"#deviceDescription\">device description</a> of the receiving channel.</li></ul>",
		"exampleValue": "7"
	}],
	"returnValue": "Returns an array of type <a href=\"#linkDescription\">LinkDescription</a>.",
	"errors": [{
		"code": -2,
		"description": "Device or channel are unknown."
	}],
	"exampleOutput": [{
		"call": "getLinks(5, 1, 31)",
		"output": ""
	}]
}
